{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 2e27bd421747b0d490a3","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","draw","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","rowIndex","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","value","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","getFrozenColumnsWidth","column","getSchema","min","frozenColumn","hiddenFrozenColumnCount","hidden","getColummnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","cellBorderWidth","visibleRows","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","scrollIndexLeft","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","debug","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","pop","perf","reduce","toFixed","perfDelta","frozenColumnsWidth","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","key","dpl","pw","ph","px","py","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","setScrollBoxSize","setCanvasSize","dims","dataHeight","cellBorder","dataWidth","dim","parentNodeStyle","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","getVisibleSchema","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","useHtml","hVal","join","addCellValue","trRow","textRow","tableRows","textRows","headers","sData","copyCellDataWithHeaders","filteredTextRows","includes","setData","stringify","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","message","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","whiteSpace","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","applyFilter","offsetY","targetX","targetY","sbh","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","childGrid","trArgs","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","getRowHeight","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UAgSCE,MAhSDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,+BACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sD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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['copyCellDataWithHeaders', true],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (self.attributes.debug) {\n                                self.ctx.font = '14px sans-serif';\n                                self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                                fillText('Actual: ' + i + ' Ordered: ' + o, x - 175, 17);\n                            }\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .40)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, .90)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = self.style.height !== 'auto'\n                    && dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = self.style.width !== 'auto'\n                    && dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = self.scrollBox.height / (dataHeight - columnHeaderCellHeight);\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseout',self.stopScrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                if(self.attributes.copyCellDataWithHeaders) {\n                  t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                  d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                } else {\n                  var filteredTextRows = textRows.map(function(row) {\n                      return row.split(',').filter(function(column) {\n                        return ![undefined,null,''].includes(column)\n                      })\n                  })\n                  t = '' + filteredTextRows.join('\\n');\n                  d = '<table><tr>' + filteredTextRows.join('</tr><tr>') + '</tr></table>';\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    if (!col.hidden) {\n                        self.selections[ri].push(index);\n                    }\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2e27bd421747b0d490a3","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['copyCellDataWithHeaders', true],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (self.attributes.debug) {\n                                self.ctx.font = '14px sans-serif';\n                                self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                                fillText('Actual: ' + i + ' Ordered: ' + o, x - 175, 17);\n                            }\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .40)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, .90)';\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = self.style.height !== 'auto'\n                    && dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = self.style.width !== 'auto'\n                    && dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = self.scrollBox.height / (dataHeight - columnHeaderCellHeight);\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseout',self.stopScrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                if(self.attributes.copyCellDataWithHeaders) {\n                  t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                  d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                } else {\n                  var filteredTextRows = textRows.map(function(row) {\n                      return row.split(',').filter(function(column) {\n                        return ![undefined,null,''].includes(column)\n                      })\n                  })\n                  t = '' + filteredTextRows.join('\\n');\n                  d = '<table><tr>' + filteredTextRows.join('</tr><tr>') + '</tr></table>';\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    if (!col.hidden) {\n                        self.selections[ri].push(index);\n                    }\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}