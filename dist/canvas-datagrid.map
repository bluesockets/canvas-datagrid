{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 3079892c10388107eb2b","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","cachedImagesDrawn","draw","drawHtml","cell","img","v","formattedValue","cacheKey","toString","rowIndex","columnIndex","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","wrapText","splitChar","lines","value","calculatedLineHeight","word","elWidth","elClipLength","plWidth","clippedVal","previousLine","words","split","textHeight","wrap","cellWhiteSpace","et","ellipsisText","line","cHeight","paddedHeight","measureText","measure","paddedWidth","splice","substring","drawText","fontHeight","lineHeight","vPos","hPos","paddingLeft","orderByArrowWidth","horizontalAlignment","paddingRight","verticalAlignment","paddingBottom","lineSpacing","offsetLeft","offsetTop","debug","font","debugFont","debugColor","stringify","pw","idx","idx_ord","sortColumnIndex","map","getFrozenColumnsWidth","column","getSchema","min","frozenColumn","hiddenFrozenColumnCount","hidden","getColummnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","cellBorderWidth","visibleRows","paddingTop","whiteSpace","cellLineHeight","cellLineSpacing","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","console","warn","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","scrollIndexLeft","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","gridBorderWidth","gridBorderColor","showPerformance","pop","perf","reduce","toFixed","perfDelta","frozenColumnsWidth","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","debugBackgroundColor","key","dpl","ph","px","py","debugPerfChartTextColor","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","wheeling","stopPropagation","fn","events","removeEventListener","sfn","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","setScrollBoxSize","setCanvasSize","dims","dataHeight","cellBorder","dataWidth","dim","parentNodeStyle","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","ellipsisCache","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","colKey","sel","cellData","colIndex","cName","getVisibleSchema","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","useHtml","hVal","join","addCellValue","trRow","textRow","tableRows","textRows","headers","sData","copyCellDataWithHeaders","filteredTextRows","includes","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","editCell","touchstart","changedTouches","startingCell","disposeContextMenu","touchContextTimeout","touchStartEvent","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","isRowVisible","isColumnVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","message","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","parentDOMNode","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","getVisibleCellByIndex","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","applyFilter","offsetY","targetX","targetY","sbh","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","childGrid","trArgs","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","xi","cidx","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","getRowHeight","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UAiTCE,MAjTDD,EAAA,WACA,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,+BACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sD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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['copyCellDataWithHeaders', true],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.text = wrapText(cell, ' ');\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = self.style.height !== 'auto'\n                    && dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = self.style.width !== 'auto'\n                    && dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = self.scrollBox.height / (dataHeight - columnHeaderCellHeight);\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseout',self.stopScrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                if(self.attributes.copyCellDataWithHeaders) {\n                  t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                  d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                } else {\n                  var filteredTextRows = textRows.map(function(row) {\n                      return row.split(',').filter(function(column) {\n                        return ![undefined,null,''].includes(column)\n                      })\n                  })\n                  t = '' + filteredTextRows.join('\\n');\n                  d = '<table><tr>' + filteredTextRows.join('</tr><tr>') + '</tr></table>';\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        /**\n         * Gets or sets the order of the rows.  This allows you to modify the appearance of the data without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the rows, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of rows.\n         */\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        /**\n         * Gets or sets the order of the columns.  This allows you to modify the appearance of the schema without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the columns, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of columns.\n         */\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < s.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            self.parentDOMNode.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            self.parentDOMNode.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    if (!col.hidden) {\n                        self.selections[ri].push(index);\n                    }\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3079892c10388107eb2b","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['copyCellDataWithHeaders', true],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    while(plWidth == undefined || (plWidth > cell.paddedWidth && elClipLength < clippedVal.length)) {\n                        plWidth = self.ctx.measureText(clippedVal + et).width\n                        clippedVal = clippedVal.substring(0, clippedVal.length - elClipLength);\n                        elClipLength + 1;\n                    }\n                    clippedVal = clippedVal + et;\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/horizontal/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                        en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (/vertical/.test(u.context)) {\n                        self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                    }\n                    radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                        en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.text = wrapText(cell, ' ');\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            dataHeight += columnHeaderCellHeight;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            self.scrollBox.horizontalBarVisible = self.style.width !== 'auto' && dataWidth > self.scrollBox.width;\n            self.scrollBox.verticalBarVisible = self.style.height !== 'auto' && dataHeight > self.scrollBox.height;\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible && !self.isChildGrid) {\n                if (self.style.height === 'auto') {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.horizontalBarVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = self.style.height !== 'auto'\n                    && dataHeight > self.scrollBox.height;\n            }\n            if (self.scrollBox.verticalBarVisible && !self.isChildGrid) {\n                if (self.style.width === 'auto') {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                self.scrollBox.verticalBarVisible = dataHeight > self.scrollBox.height;\n                self.scrollBox.horizontalBarVisible = self.style.width !== 'auto'\n                    && dataWidth > self.scrollBox.width;\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height - columnHeaderCellHeight;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = self.scrollBox.height / (dataHeight - columnHeaderCellHeight);\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev = {\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseout',self.stopScrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.columns[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                headers = [],\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(useHtml) {\n                if (!s.length) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    if (!column.hidden) {\n                        // intentional redefinition of column\n                        column = s[self.orders.columns[columnIndex]];\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        var trRow = [],\n                            textRow = [];\n                        s.forEach(function (column, columnIndex) {\n                            if (!column.hidden) {\n                                // intentional redefinition of column\n                                column = s[self.orders.columns[columnIndex]];\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                if(self.attributes.copyCellDataWithHeaders) {\n                  t = addHeaders() + (headers.length > 0 ? '\\n' : '') + textRows.join('\\n');\n                  d = '<table>' + addHeaders(true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                } else {\n                  var filteredTextRows = textRows.map(function(row) {\n                      return row.split(',').filter(function(column) {\n                        return ![undefined,null,''].includes(column)\n                      })\n                  })\n                  t = '' + filteredTextRows.join('\\n');\n                  d = '<table><tr>' + filteredTextRows.join('</tr><tr>') + '</tr></table>';\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        /**\n         * Gets or sets the order of the rows.  This allows you to modify the appearance of the data without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the rows, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of rows.\n         */\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        /**\n         * Gets or sets the order of the columns.  This allows you to modify the appearance of the schema without modifying the data itself.\n         * @memberof canvasDatagrid\n         * @name columnOrder\n         * @method\n         * @param {array} val Array of integers.  The order of the array dictates the order of the columns, e.g.: [0, 1, 2] is normal order, [2, 1, 0] is reverse.  The array length must be equal to or greater than the number of columns.\n         */\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < s.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                throw new Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.');\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            self.parentDOMNode.removeChild(self.input);\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            self.parentDOMNode.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    if (!col.hidden) {\n                        self.selections[ri].push(index);\n                    }\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}